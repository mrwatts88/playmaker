// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  players   Player[]

  // Relations
  sessions UserSession[]
}

model Session {
  id          String    @id @default(cuid())
  name        String
  sessionCode String    @unique
  status      String    @default("WAITING")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  startTime   DateTime
  endTime     DateTime?
  players     Player[]

  // Relations
  userSessions UserSession[]
}

model UserSession {
  id        String   @id @default(cuid())
  xp        Int      @default(0)
  money     Int      @default(1000) // Starting money for drafting
  joinedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isCreator Boolean  @default(false)

  // Relations
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  sessionId    String
  session      Session       @relation(fields: [sessionId], references: [id])
  players      Player[]
  activeBoosts ActiveBoost[]

  @@unique([userId, sessionId])
}

model AvailablePlayer {
  id        String   @id @default(cuid())
  name      String
  team      String
  position  String
  price     Int // Cost to draft this player
  stats     Json // Store player stats as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  players Player[]
}

model Player {
  id                String          @id @default(cuid())
  userId            String
  sessionId         String
  isCreator         Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  user              User            @relation(fields: [userId], references: [id])
  session           Session         @relation(fields: [sessionId], references: [id])
  userSessionId     String
  availablePlayerId String
  userSession       UserSession     @relation(fields: [userSessionId], references: [id])
  availablePlayer   AvailablePlayer @relation(fields: [availablePlayerId], references: [id])
  activeBoosts      ActiveBoost[]

  @@unique([userId, sessionId])
}

model Boost {
  id           String        @id @default(cuid())
  name         String
  description  String
  multiplier   Float
  duration     Int // Duration in seconds
  cost         Int
  boostType    String
  activeBoosts ActiveBoost[]
}

model ActiveBoost {
  id            String      @id @default(cuid())
  boostId       String
  playerId      String
  completed     Boolean     @default(false)
  endTime       DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  boost         Boost       @relation(fields: [boostId], references: [id])
  player        Player      @relation(fields: [playerId], references: [id])
  userSession   UserSession @relation(fields: [userSessionId], references: [id])
  userSessionId String
}
